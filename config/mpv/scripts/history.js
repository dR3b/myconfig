'use strict';

// Generated by CoffeeScript 2.0.2
var R, cache, getFile, get_property, getenv, histfile, join_path, read_file, sortTime, uniqFile, writeToHistory, write_file;

R = require('./lib/ramda');

var _mp = mp;
get_property = _mp.get_property;
var _mp$utils = mp.utils;
join_path = _mp$utils.join_path;
read_file = _mp$utils.read_file;
write_file = _mp$utils.write_file;
getenv = _mp$utils.getenv;


cache = getenv('APPDATA') || getenv('HOME') + '/.cache';

histfile = cache + '/mpv/history.json';

sortTime = R.sort(function (x, y) {
  return y.time - x.time;
});

uniqFile = R.uniqBy(R.prop('file'));

writeToHistory = function writeToHistory() {
  var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

  var e;
  try {
    return write_file('file://' + histfile, JSON.stringify(data));
  } catch (error) {
    e = error;
    return dump(e);
  }
};

getFile = function getFile() {
  var file = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : histfile;

  try {
    return JSON.parse(read_file(file));
  } catch (error) {
    writeToHistory();
    return [];
  }
};

mp.register_event('file-loaded', function () {
  var file, log, path, wd;
  log = getFile(histfile);
  var _ref = [get_property('working-directory'), get_property('path')];
  wd = _ref[0];
  path = _ref[1];

  file = /^http/.test(path) ? path : join_path(wd, path);
  dump(path);
  log.push({
    time: Date.now(),
    file: file
  });
  return writeToHistory(uniqFile(sortTime(log)));
});

mp.register_event('idle', function () {
  var log;
  log = R.slice(0, 20, sortTime(uniqFile(getFile(histfile))));
  log.map(function (el) {
    return mp.commandv('loadfile', el.file, 'append-play');
  });
  return writeToHistory(log);
});

