// Generated by CoffeeScript 1.12.7
var R, cache, get_property, getenv, histfile, join_path, read_file, ref, sortTime, uniqFile, writeToHistory, write_file;

R = require('./lib/ramda.min');

get_property = mp.get_property;

ref = mp.utils, join_path = ref.join_path, read_file = ref.read_file, write_file = ref.write_file, getenv = ref.getenv;

cache = getenv('APPDATA') || getenv('HOME') + '/.cache';

histfile = cache + '/mpv/history.json';

sortTime = R.sort(function(x, y) {
  return y.time - x.time;
});

uniqFile = R.uniqBy(R.prop('file'));

writeToHistory = function(data) {
  if (data == null) {
    data = [];
  }
  return write_file("file://" + histfile, JSON.stringify(data, null, 4));
};

mp.register_event('file-loaded', function() {
  var e, file, log, raw;
  try {
    raw = read_file(histfile);
  } catch (error) {
    e = error;
    writeToHistory();
    raw = '[]';
  }
  log = JSON.parse(raw);
  file = join_path(get_property('working-directory'), get_property('path'));
  log.push({
    time: Date.now(),
    file: file
  });
  try {
    return writeToHistory(uniqFile(sortTime(log)));
  } catch (error) {
    e = error;
    return dump(e);
  }
});

mp.register_event('idle', function() {
  var e, log, log20, raw;
  try {
    raw = read_file(histfile);
  } catch (error) {
    e = error;
    print("log file doesn't exist");
    writeToHistory();
    raw = '[]';
  }
  log = uniqFile(sortTime(JSON.parse(raw)));
  log20 = log.slice(0, 20);
  log20.map(function(el) {
    return mp.commandv('loadfile', el.file, 'append-play');
  });
  try {
    return writeToHistory(log20);
  } catch (error) {
    e = error;
    return dump(e);
  }
});
