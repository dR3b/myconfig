// Generated by CoffeeScript 1.12.7
var R, cache, getFile, get_property, getenv, histfile, join_path, read_file, ref, sortTime, uniqFile, writeToHistory, write_file;

R = require('./lib/ramda');

get_property = mp.get_property;

ref = mp.utils, join_path = ref.join_path, read_file = ref.read_file, write_file = ref.write_file, getenv = ref.getenv;

cache = getenv('APPDATA') || getenv('HOME') + '/.cache';

histfile = cache + '/mpv/history.json';

sortTime = R.sort(function(x, y) {
  return y.time - x.time;
});

uniqFile = R.uniqBy(R.prop('file'));

writeToHistory = function(data) {
  var e;
  if (data == null) {
    data = [];
  }
  try {
    return write_file("file://" + histfile, JSON.stringify(data));
  } catch (error) {
    e = error;
    return dump(e);
  }
};

getFile = function(file) {
  if (file == null) {
    file = histfile;
  }
  try {
    return JSON.parse(read_file(file));
  } catch (error) {
    writeToHistory();
    return [];
  }
};

mp.register_event('file-loaded', function() {
  var file, log;
  log = getFile(histfile);
  file = join_path(get_property('working-directory'), get_property('path'));
  log.push({
    time: Date.now(),
    file: file
  });
  return writeToHistory(uniqFile(sortTime(log)));
});

mp.register_event('idle', function() {
  var log;
  log = R.slice(0, 20, uniqFile(sortTime(getFile(histfile))));
  log.map(function(el) {
    return mp.commandv('loadfile', el.file, 'append-play');
  });
  return writeToHistory(log);
});
