#!/usr/bin/env python3
"""
MPV wrapper with somewhat stable history support
"""

from subprocess import call as launch
from sys import exit as os_return
from os import path, getenv, makedirs
from re import match as regex
import argparse


def main(history=None, mpv_args=None):
    """
    Execute mpv with the passed params
        and record it to history

    Args:
        history: history nth count
        mpv_args: raw arguments for mpv as an iterable

    Returns:
        0: if all okay
        !0: if mpv crashed
    """

    mpv = ["/usr/bin/env", "mpv"]

    if history:
        mpv.append(get_last(history))

    if mpv_args:
        for arg in mpv_args:
            if arg[0] != '-' and path.isfile(arg):
                filename = path.realpath(arg)
                log_text(filename)
            elif regex(r'http|//', arg):
                log_text(arg)
            mpv.append(arg)

    if mpv_args or history:
        return launch(mpv)
    else:
        return 255


def log_text(text):
    """
    Appends the passed text to the log file

    Args:
        text: Text to be added to log
    """
    with open(LOG_FILE, 'a') as log:
        log.write(text + '\n')


def get_last(nth):
    """
    Gets the nth last line from the LOG_FILE

    Args:
        nth: the reversed-index of the expected line. (i.e. nth-last line)

    Returns:
        the nth-last line from the log file.
        If "nth" is out of range, returns the last line from the log.
        and if the file does not exist, returns empty string
    """
    if not path.isfile(LOG_FILE):
        print('The history file doesn\'t exist.',
              'Please play something normally first.')
        return ''

    with open(LOG_FILE, 'r') as file_cont:
        log = file_cont.readlines()
        log.reverse()
        if nth > len(log) > 0:
            print('Warning: The specified index does not exist in history.',
                  'Opening the last played file instead.')
            return log[0].strip('\n')
        else:
            return log[nth-1].strip('\n')


if __name__ == "__main__":
    _LINUX_CACHE = path.join(getenv('HOME', '~'), '.cache')
    _XDG_CACHE = getenv('XDG_CACHE_HOME', _LINUX_CACHE)
    LOG_DIR = path.join(_XDG_CACHE, 'mpv')

    if not path.isdir(LOG_DIR):
        makedirs(LOG_DIR)

    LOG_FILE = path.join(LOG_DIR, 'history.log')

    PARSER = argparse.ArgumentParser(prog='MPV +history', add_help=False)
    PARSER.add_argument('--last', '-L', nargs='?', const=1, type=int)

    (FLAG, MPV_ARGS) = PARSER.parse_known_args()
    LAST = FLAG.last

    os_return(main(LAST, MPV_ARGS))
